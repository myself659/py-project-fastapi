{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>This site contains the project documentation for the <code>Python Project fastapi</code></p>"},{"location":"index.html#table-of-contents","title":"Table of Contents","text":"<p>The documentation follows the best practice for project documentation as described by Daniele Procida in the myself659 and consists of four separate parts:</p> <ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ol>"},{"location":"reference.html","title":"Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the project code.</p> <p>options: show_root_heading: true</p> <p>Provides several sample functions. The module contains the following functions: - <code>foo(a, b)</code> - Returns the sum of two numbers (int). - `bar(a)' - Returns a hello message with the input string.</p> <p>options: show_root_heading: true</p>"},{"location":"reference.html#example_app.app.get_pokemon","title":"<code>get_pokemon(number=Path(title='The Pok\u00e9mon to get (based on number)', ge=1, le=151))</code>","text":"<p>Endpoint that returns information about Pok\u00e9mon. Args:     number: The number of the Pok\u00e9mon to get Returns:     Awesome information about the Pok\u00e9mon!</p> Source code in <code>src/example_app/app.py</code> <pre><code>@app.get(path=\"/{number}\", status_code=status.HTTP_200_OK)\ndef get_pokemon(\n    number: int = Path(title=\"The Pok\u00e9mon to get (based on number)\", ge=1, le=151),\n) -&gt; dict:\n    \"\"\"\n    Endpoint that returns information about Pok\u00e9mon.\n    Args:\n        number: The number of the Pok\u00e9mon to get\n    Returns:\n        Awesome information about the Pok\u00e9mon!\n    \"\"\"\n    pokemon_url: str = f\"https://pokeapi.co/api/v2/pokemon/{number}\"\n\n    try:\n        response: Response = httpx.get(url=pokemon_url)\n    except Exception:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Could not send a request to {pokemon_url}\",\n        )\n\n    if response.status_code == status.HTTP_200_OK:\n        return response.json()\n    else:\n        raise HTTPException(status_code=response.status_code, detail=response.text)\n</code></pre>"},{"location":"reference.html#example_app.service.bar","title":"<code>bar(name='Frank Herbert')</code>","text":"<p>Says 'Hello' with input. Args:     name: input string Returns:     A 'Hello' message.</p> Source code in <code>src/example_app/service.py</code> <pre><code>def bar(name: str = \"Frank Herbert\") -&gt; str:\n    \"\"\"\n    Says 'Hello' with input.\n    Args:\n        name: input string\n    Returns:\n        A 'Hello' message.\n    \"\"\"\n    return f\"Hello, {name}!\"\n</code></pre>"},{"location":"reference.html#example_app.service.foo","title":"<code>foo(a, b)</code>","text":"<p>This is a description what the function does. Examples:     &gt;&gt;&gt; foo(a=1, b=2)     3     &gt;&gt;&gt; foo(a=4, b=15)     19 Args:     a: This is the first summand     b: This is the second summand Returns:     The summation of a and b.</p> Source code in <code>src/example_app/service.py</code> <pre><code>def foo(a: int, b: int) -&gt; int:\n    \"\"\"\n    This is a description what the function does.\n    Examples:\n        &gt;&gt;&gt; foo(a=1, b=2)\n        3\n        &gt;&gt;&gt; foo(a=4, b=15)\n        19\n    Args:\n        a: This is the first summand\n        b: This is the second summand\n    Returns:\n        The summation of a and b.\n    \"\"\"\n    return a + b\n</code></pre>"}]}